{"ast":null,"code":"// export const LOCAL_HOST = 'http://172.31.249.212:992';\nexport const LOCAL_HOST = 'http://localhost:8085';\nexport const LOCAL_HOST_NOTIF = 'http://localhost:8080';\nexport const GET_DEVICES_LOGIN = login => `${LOCAL_HOST}/api/devices/myDevices/${login}`;\n_c = GET_DEVICES_LOGIN;\nexport const GET_CONFIG_LOGIN = login => `${LOCAL_HOST}/api/devices/configurations/${login}`;\n_c2 = GET_CONFIG_LOGIN;\nexport const ADD_CONFIGURATION = deviceId => `${LOCAL_HOST}/api/configurations/add/${deviceId}`;\n_c3 = ADD_CONFIGURATION;\nexport const UPDATE_CONFIGURATION = deviceId => `${LOCAL_HOST}/api/configurations/update/${deviceId}`;\n_c4 = UPDATE_CONFIGURATION;\nexport const LOGIN_USER = LOCAL_HOST + '/api/users/loginUser';\nexport const GET_ALL_CONFIGURATIONS = LOCAL_HOST + '/api/configurations/all';\nexport const GET_ALL_DEVICES = LOCAL_HOST + '/api/devices/all';\nexport const loginUser = async (login, password) => {\n  try {\n    const response = await fetch(LOGIN_USER, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: login,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error: ${errorText}`);\n    }\n    const data = await response.json();\n    sessionStorage.setItem('userId', data.userId);\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error.message);\n    throw error;\n  }\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport const GET_NOTIFICATIONS = userId => `${LOCAL_HOST_NOTIF}/notifications/${userId}`;\n_c5 = GET_NOTIFICATIONS;\nexport const fetchNotifications = async userId => {\n  try {\n    const response = await fetch(GET_NOTIFICATIONS(userId), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch notifications');\n    }\n    const data = await response.json();\n    console.log('Fetched notifications:', data); // Vérification des données\n    return data;\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    return [];\n  }\n};\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GET_DEVICES_LOGIN\");\n$RefreshReg$(_c2, \"GET_CONFIG_LOGIN\");\n$RefreshReg$(_c3, \"ADD_CONFIGURATION\");\n$RefreshReg$(_c4, \"UPDATE_CONFIGURATION\");\n$RefreshReg$(_c5, \"GET_NOTIFICATIONS\");","map":{"version":3,"names":["LOCAL_HOST","LOCAL_HOST_NOTIF","GET_DEVICES_LOGIN","login","_c","GET_CONFIG_LOGIN","_c2","ADD_CONFIGURATION","deviceId","_c3","UPDATE_CONFIGURATION","_c4","LOGIN_USER","GET_ALL_CONFIGURATIONS","GET_ALL_DEVICES","loginUser","password","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","data","json","sessionStorage","setItem","userId","error","console","message","GET_NOTIFICATIONS","_c5","fetchNotifications","log","$RefreshReg$"],"sources":["C:/Users/Youssra/Desktop/PAAS/House_App/House_front/src/constants/back.js"],"sourcesContent":["\r\n// export const LOCAL_HOST = 'http://172.31.249.212:992';\r\nexport const LOCAL_HOST = 'http://localhost:8085'\r\nexport const LOCAL_HOST_NOTIF = 'http://localhost:8080'\r\n\r\n\r\nexport const GET_DEVICES_LOGIN =(login) => `${LOCAL_HOST}/api/devices/myDevices/${login}`;\r\nexport const GET_CONFIG_LOGIN =(login) => `${LOCAL_HOST}/api/devices/configurations/${login}`;\r\nexport const ADD_CONFIGURATION = (deviceId) => `${LOCAL_HOST}/api/configurations/add/${deviceId}`;\r\nexport const UPDATE_CONFIGURATION = (deviceId) => `${LOCAL_HOST}/api/configurations/update/${deviceId}`;\r\nexport const LOGIN_USER = LOCAL_HOST + '/api/users/loginUser';\r\nexport const GET_ALL_CONFIGURATIONS = LOCAL_HOST + '/api/configurations/all';\r\nexport const GET_ALL_DEVICES = LOCAL_HOST + '/api/devices/all';\r\n\r\nexport const loginUser = async (login, password) => {\r\n    try {\r\n        const response = await fetch(LOGIN_USER, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                login: login,\r\n                password: password\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Error: ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        sessionStorage.setItem('userId', data.userId);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Login failed:', error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const GET_NOTIFICATIONS = (userId) => `${LOCAL_HOST_NOTIF}/notifications/${userId}`;\r\n\r\nexport const fetchNotifications = async (userId) => {\r\n    try {\r\n        const response = await fetch(GET_NOTIFICATIONS(userId), {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch notifications');\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Fetched notifications:', data);  // Vérification des données\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching notifications:', error);\r\n        return [];\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}