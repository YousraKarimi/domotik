{"ast":null,"code":"// export const LOCAL_HOST = 'http://172.31.249.212:992';\nexport const LOCAL_HOST = 'http://localhost:8085';\nexport const LOCAL_HOST_NOTIF = 'http://localhost:8080';\nexport const GET_DEVICES_LOGIN = login => `${LOCAL_HOST}/api/devices/myDevices/${login}`;\n_c = GET_DEVICES_LOGIN;\nexport const GET_CONFIG_LOGIN = login => `${LOCAL_HOST}/api/devices/configurations/${login}`;\n_c2 = GET_CONFIG_LOGIN;\nexport const ADD_CONFIGURATION = deviceId => `${LOCAL_HOST}/api/configurations/add/${deviceId}`;\n_c3 = ADD_CONFIGURATION;\nexport const UPDATE_CONFIGURATION = deviceId => `${LOCAL_HOST}/api/configurations/update/${deviceId}`;\n_c4 = UPDATE_CONFIGURATION;\nexport const LOGIN_USER = LOCAL_HOST + '/api/users/loginUser';\nexport const loginUser = async (login, password) => {\n  try {\n    const response = await fetch(LOGIN_USER, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: login,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error: ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('Login response data:', data); // Vérifiez la structure de la réponse\n\n    // Vérifier si l'objet User contient un userId et le stocker\n    if (data && data.id) {\n      sessionStorage.setItem('userId', data.id);\n      console.log('User ID stored in sessionStorage:', data.id); // Vérification\n    } else {\n      console.error('userId not found in response');\n    }\n\n    // Renvoyer l'objet User complet pour les autres méthodes\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error.message);\n    throw error;\n  }\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport const GET_NOTIFICATIONS = userId => `${LOCAL_HOST_NOTIF}/notifications/${userId}`;\n_c5 = GET_NOTIFICATIONS;\nexport const fetchNotifications = async userId => {\n  try {\n    const response = await fetch(GET_NOTIFICATIONS(userId), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch notifications');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    throw error;\n  }\n};\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GET_DEVICES_LOGIN\");\n$RefreshReg$(_c2, \"GET_CONFIG_LOGIN\");\n$RefreshReg$(_c3, \"ADD_CONFIGURATION\");\n$RefreshReg$(_c4, \"UPDATE_CONFIGURATION\");\n$RefreshReg$(_c5, \"GET_NOTIFICATIONS\");","map":{"version":3,"names":["LOCAL_HOST","LOCAL_HOST_NOTIF","GET_DEVICES_LOGIN","login","_c","GET_CONFIG_LOGIN","_c2","ADD_CONFIGURATION","deviceId","_c3","UPDATE_CONFIGURATION","_c4","LOGIN_USER","loginUser","password","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","data","json","console","log","id","sessionStorage","setItem","error","message","GET_NOTIFICATIONS","userId","_c5","fetchNotifications","$RefreshReg$"],"sources":["C:/Users/Youssra/Desktop/PAAS/House_App/House_front/src/constants/back.js"],"sourcesContent":["\r\n// export const LOCAL_HOST = 'http://172.31.249.212:992';\r\nexport const LOCAL_HOST = 'http://localhost:8085'\r\nexport const LOCAL_HOST_NOTIF = 'http://localhost:8080'\r\n\r\n\r\nexport const GET_DEVICES_LOGIN =(login) => `${LOCAL_HOST}/api/devices/myDevices/${login}`;\r\nexport const GET_CONFIG_LOGIN =(login) => `${LOCAL_HOST}/api/devices/configurations/${login}`;\r\nexport const ADD_CONFIGURATION = (deviceId) => `${LOCAL_HOST}/api/configurations/add/${deviceId}`;\r\nexport const UPDATE_CONFIGURATION = (deviceId) => `${LOCAL_HOST}/api/configurations/update/${deviceId}`;\r\nexport const LOGIN_USER = LOCAL_HOST + '/api/users/loginUser';\r\n\r\n\r\nexport const loginUser = async (login, password) => {\r\n    try {\r\n        const response = await fetch(LOGIN_USER, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                login: login,\r\n                password: password\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Error: ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Login response data:', data);  // Vérifiez la structure de la réponse\r\n\r\n        // Vérifier si l'objet User contient un userId et le stocker\r\n        if (data && data.id) {\r\n            sessionStorage.setItem('userId', data.id);\r\n            console.log('User ID stored in sessionStorage:', data.id);  // Vérification\r\n        } else {\r\n            console.error('userId not found in response');\r\n        }\r\n\r\n        // Renvoyer l'objet User complet pour les autres méthodes\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Login failed:', error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const GET_NOTIFICATIONS = (userId) => `${LOCAL_HOST_NOTIF}/notifications/${userId}`;\r\n\r\nexport const fetchNotifications = async (userId) => {\r\n    try {\r\n        const response = await fetch(GET_NOTIFICATIONS(userId), {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch notifications');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching notifications:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}